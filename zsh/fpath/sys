cflags() {
  gcc -c -Q -march=native --help=target
}

ls_type() {
    if $(ls --color -d "${HOME}" >/dev/null 2>&1); then
    echo 'gnu'
  elif $(ls -G -d "${HOME}" >/dev/null 2>&1); then
    echo 'bsd'
  else
    echo 'solaris'
  fi
}

os_name() {
  case "${OSTYPE}" in
    bsd*)
      echo 'bsd'
      ;;
    darwin*)
      echo 'macos'
      ;;
    linux*)
      echo 'linux'
      ;;
    solaris*)
      echo 'solaris'
      ;;
    *)
      echo "Unknown: ${OSTYPE}"
      ;;
  esac
}

os_like() {
  [[ $(os_name) != 'linux' ]] && echo $(os_name) || 
    echo $(grep 'ID_LIKE=*' /etc/os-release | cut -f2- -d=)
}

is_linux() {
  [[ $(os_name) == 'linux' ]] && echo 'true' || echo 'false'
}

is_macos() {
  [[ $(os_name) == 'macos' ]] && echo 'true' || echo 'false'
}

help() {
  echo "${0} [OPTION]"
  echo "  cflags     get compiler flags for -march=native"
  echo "  ls-type    get ls type of current system"
  echo "  os-name    get current operating system name"
  echo "  os-like    on linux will get the distro family, otherwise same as os-name"
  echo "  is-linux   check if current os is linux"
  echo "  is-macos   check if current os is darwin"
}

sys() {
  local arg="${1/-/_}"
  local fun=(cflags ls_type os_name os_like is_linux is_macos is_func)

  # Check whether value exists in fun array before executing, prevent any random argument from being executed
  # https://unix.stackexchange.com/questions/411304/how-do-i-check-whether-a-zsh-array-contains-a-given-value
  [[ ${fun[(ie)$arg]} -le ${#fun} ]] && ${arg} || help
}

sys "$@"
