#!/bin/zsh

function cmd_amd_epp {
  local epp_value=""

  # (N): makes the glob expand to nothing if no matches, preventing errors.
  local epp_paths=( /sys/devices/system/cpu/cpu*/cpufreq/energy_performance_preference(N) )

  if (( $#epp_paths == 0 )); then
     stderr "Error: No CPU energy preference files found or accessible."
     return 1
  fi

  if [[ $# -eq 0 ]]; then
      # No arguments provided, default to info
      ${funcstack[1]} --info
      return $?
  fi

  case "${1}" in
    '-h' | '--help')
      stdout ""
      stdout "cmd_amd_epp, amd-epp: simple script to manage AMD energy performance preference settings"
      stdout "Running with no argument given will default to show EPP state (--info)"
      stdout ""
      stdout "Usage: amd-epp [argument]"
      stdout "Valid arguments:"
      stdout "  -h,  --help             show help information"
      stdout "  -i,  --info             show epp information for all cores (default function)"
      stdout "  -p0, --max-performance  set epp to performance"
      stdout "  -p1, --bal-performance  set epp to balance_performance"
      stdout "  -p2, --bal-powersave    set epp to balance_power"
      stdout "  -p3, --max-powersave    set epp to power"
      stdout ""
      stdout "If you want to switch EPP profile without password, add the following line to sudoers (sudo visudo)"
      stdout "<your_username> ALL=(root) NOPASSWD: /usr/bin/tee /sys/devices/system/cpu/cpu*/cpufreq/energy_performance_preference"
      ;;
    '-i' | '--info')
      for filepath in "${epp_paths[@]}"; do
        if fn_is_readable "$filepath"; then
          # 1. ${filepath#*/cpu/cpu} removes the shortest prefix ending in */cpu/cpu
          #    (e.g., "0/cpufreq/energy_performance_preference")
          # 2. ${ ... %%/*} removes the longest suffix starting with /* from the result of step 1
          #    (e.g., "0")
          local cpunum=${${filepath#*/cpu/cpu}%%/*}
          local value=$(< "$filepath")
          printf -- "- CPU%02d: %s\n" "$cpunum" "$value"
        fi
      done | column -c "${COLUMNS:-$(tput cols)}"
      ;;
    '-p0' | '--max-performance')
      # Prioritizes performance above power saving. The CPU will be encouraged
      # to reach and maintain higher clock speeds more aggressively,
      # potentially consuming more power even during lighter loads.
      epp_value="performance"
      ;;
    '-p1' | '--bal-performance')
      # Aims for a balance but leans slightly towards performance. The CPU will
      # still scale down to save power but will ramp up more readily
      # when load increases compared to balance_power.
      # This is the default settings
      epp_value="balance_performance"
      ;;
    '-p2' | '--bal-powersave')
      # This setting strikes a balance that leans slightly towards power saving.
      # The CPU will be more conservative about ramping up clock speeds,
      # preferring to stay in lower power states longer.
      epp_value="balance_power"
      ;;
    '-p3' | '--max-powersave')
      # This setting strongly prioritizes power saving over performance.
      # The CPU will be much less aggressive in increasing clock speeds
      # and will favor lower frequencies and power states, potentially
      # limiting peak performance significantly even under load.
      epp_value="power"
      ;;
    *)
      stderr "Error: Invalid argument '$1'"
      ${funcstack[1]} --help
      return 1
      ;;
  esac

  if fn_has_value "$epp_value"; then
    stdout "Attempting to set EPP to '$epp_value' for ${#epp_paths[@]} CPU(s)..."
    stdout "$epp_value" | sudo tee $epp_paths &> /dev/null

    if (( PIPESTATUS[2] == 0 )); then
      stdout "Successfully set EPP for all CPUs."
    else
      stderr "Error: Failed to set EPP for one or more CPUs. Check sudo permissions and file existence."
      return 1
    fi
  fi
}
