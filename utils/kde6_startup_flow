#!/bin/zsh
# File: kde_startup_flow;
# Open predefined applications inside a respective virtual desktop on login.
#
# Works best when combined with tiling script like kröhnkite so you don't have to worry about window layout.
# On a system with Wayland and multi-screen setup it is recommended to install 'Open Window on Active Screen'
# KWin script, since as of KDE 6.3 window rules for screen placement is still not working properly.
#
# Kröhnkite (Plasma 6 Fork): https://github.com/anametologin/krohnkite
# Open Window on Active Screen (Plasma 6 Fork): https://github.com/MagiusCHE/p6-owac
#
# Configuration is done via a JSON file defined by KDE_STARTUP_FLOW environment variable.
# If the variable is not set, it defaults to ~/.config/dotfiles/myconf/startup_flow.json.
#
# The JSON file should contain the following structure:
# {
#   "settings": {
#     "initial_delay": 0.5,
#     "inter_desktop_delay": 0.5,
#     "inter_app_delay": 0.5
#   },
#   "exec_names": ["handlr", "qdbus", "sleep"],
#   "desktops": [
#     {
#       "desktop": 1,
#       "commands": [
#         {
#           "exec": "handlr",
#           "args": [
#             "launch",
#             "x-scheme-handler/https",
#             "--",
#             "--profile-directory=Profile1",
#             "--app-id=agimnkijcaahngcdmfeangaknmldooml"
#           ]
#         },
#         {
#           "exec": "handlr",
#           "args": [
#             "launch",
#             "x-scheme-handler/https",
#             "--",
#             "--profile-directory=Profile1",
#             "--new-window"
#           ]
#         }
#       ]
#     }
#   ]
# }

# --- Debug / dry-run flag ---
local debug_mode=0

if [[ "$1" == "--debug" ]]; then
  debug_mode=1

  print -r -- "Debug mode enabled. No actual commands will be executed."
  print -r -- ""
fi

# --- Check for dependencies ---
function check_exec() {
  if (( ! ${+commands[$1]} )); then
    print -r -- "Error: '$1' command is not installed."
    exit 1
  fi
}

check_exec jq

# --- Configuration File ---
local config_file=${KDE_STARTUP_FLOW:-"$HOME/.config/dotfiles/myconf/startup_flow.json"}

if [[ ! -f "$config_file" ]]; then
  print -r -- "Configuration file not found: $config_file"
  exit 1
fi

# Check the rest of the dependencies
local exec_names="$(jq -r ".exec_names[]" "$config_file")"
local exec_names_raw=( ${(f)exec_names} )

for name in "${exec_names_raw[@]}"; do
  check_exec "$name"
done

# --- Read Settings ---
# Use jq to read settings, value behind // operator are default values
local initial_delay=$(jq '.settings.initial_delay // 2' "$config_file")
local inter_desktop_delay=$(jq '.settings.inter_desktop_delay // 1' "$config_file")
local inter_app_delay=$(jq '.settings.inter_app_delay // 0.5' "$config_file")

# Validate numeric values (basic check)
[[ "$initial_delay" =~ ^[0-9]+(\.[0-9]+)?$ ]] || {
  print -r -- "Error: Invalid initial_delay value in config."
  exit 1
}

[[ "$inter_desktop_delay" =~ ^[0-9]+(\.[0-9]+)?$ ]] || {
  print -r -- "Error: Invalid inter_desktop_delay value in config."
  exit 1
}

[[ "$inter_app_delay" =~ ^[0-9]+(\.[0-9]+)?$ ]] || {
  print -r -- "Error: Invalid inter_app_delay value in config."
  exit 1
}

# --- Main Logic ---
sleep $initial_delay

# Get the number of desktop configurations
local num_desktops=$(jq '.desktops | length' "$config_file")

if (( num_desktops == 0 )); then
  print -r -- "No desktop configurations found in $config_file"
  exit 1
fi

print -r -- "Starting KDE startup flow."
print -r -- "Found $num_desktops desktop configurations."
print -r -- ""

# Loop through each desktop object in the JSON array
for ((i = 0; i < num_desktops; i++)); do

  # Extract desktop number for the current object
  local desktop_num=$(jq -r ".desktops[$i].desktop" "$config_file")
  print -r -- "Initializing desktop $desktop_num..."

  if (( ! debug_mode )); then
    qdbus org.kde.KWin /KWin setCurrentDesktop $desktop_num &> /dev/null
  fi

  # Get the number of commands for the current desktop object
  local num_commands=$(jq ".desktops[$i].commands | length" "$config_file")

  if (( num_commands == 0 )); then
    print -r -- "No commands listed for Desktop $desktop_num."
  else
    # Loop through each command object for the current desktop
    for ((j = 0; j < num_commands; j++)); do
      # Extract command and arguments using jq
      local cmd_exec=$(jq -r ".desktops[$i].commands[$j].exec" "$config_file")

      # Check if exec command is empty
      if [[ -z "$cmd_exec" || "$cmd_exec" == "null" ]]; then
        print -r -- "Warning: Skipping command with empty 'exec' at desktop index $i, command index $j."
        continue
      fi

      # Use Zsh's ${(f)"$(...)"} parameter expansion flag to read lines from jq into a zsh array.
      # This also correctly handles arguments with spaces.
      local cmd_args="$(jq -r ".desktops[$i].commands[$j].args[]" "$config_file")"
      local cmd_args_raw=( ${(f)cmd_args} )

      # Perform safe expansion on arguments (e.g., $HOME -> /home/user)
      local expanded_args=()

      for arg in "${cmd_args_raw[@]}"; do
        # Use zsh (e) flag for safe expansion (handles $VAR, ${VAR}, $(...), etc.)
        # Does NOT handle tilde '~'. Use $HOME in JSON config instead.
        expanded_args+=( "${(e)arg}" )
      done

      print -r -- "Executing: $cmd_exec ${expanded_args[*]}"

      if (( ! debug_mode )); then
        "$cmd_exec" "${expanded_args[@]}" ||
          print -r -- "Warning: Command exited with non-zero status: ${(@qq)cmd_exec}"
        sleep $inter_app_delay
      fi
    done

    print -r -- ""
  fi

  sleep $inter_desktop_delay
done

if (( ! debug_mode )); then
  sleep $initial_delay
  qdbus org.kde.KWin /KWin nextDesktop
fi
